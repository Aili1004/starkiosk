package com.snepo.givv.cardbrowser.services.note{		import com.adobe.serialization.json.*;	import com.snepo.givv.cardbrowser.util.*		import flash.events.*;	import flash.net.*;	public class NoteAcceptorService extends EventDispatcher	{		public static var HOST : String = Environment.SERVICE;		public static var PORT : int = 2014;		protected var _socket : Socket;		protected var _loggedOn : Boolean = false;    	public function NoteAcceptorService()		{			super ( this );		}		public function connect ( ) : void		{			_socket = new Socket();			_socket.addEventListener ( Event.CONNECT, handleConnect, false, 0, true );			_socket.addEventListener ( IOErrorEvent.IO_ERROR, handleError, false, 0, true );			_socket.addEventListener ( SecurityErrorEvent.SECURITY_ERROR, handleError, false, 0, true );			_socket.addEventListener ( ProgressEvent.SOCKET_DATA, readIncomingBuffer, false, 0, true );			_socket.connect ( HOST, PORT );		}		protected function handleConnect ( evt : Event ) : void		{			trace ( "NoteAcceptorService connected...");			getDenominations();		}		protected function handleError ( evt : ErrorEvent ) : void		{			trace ( "NoteAcceptorService error -> " + evt.toString() );			dispatchEvent ( new NoteAcceptorEvent ( NoteAcceptorEvent.UNAVAILABLE, null ) );		}		protected function readIncomingBuffer ( evt : ProgressEvent ) : void		{			var buffer : String = _socket.readUTFBytes ( _socket.bytesAvailable );			try			{				var messages : Array = buffer.split("\n");				for ( var i : int = 0; i < messages.length; i++ )				{					var message : String = messages[i];					processMessage ( message );				}			}catch ( e : Error )			{				trace ( e.toString() );				trace ( "Error parsing PinPadService packet: " + buffer );			}		}		protected function processMessage ( message : String ) : void		{			trace ( "Got " + message );						try			{				var packet : Object = JSON.parse ( message );				dispatchEvent ( new NoteAcceptorEvent ( packet.event, packet ) );				if ( packet.event == NoteAcceptorEvent.STOPPED ) close();			}catch ( e : Error )			{							}					}		public function close ( ) : void		{			if ( _socket && _socket.connected )			{				_socket.removeEventListener ( Event.CONNECT, handleConnect );				_socket.removeEventListener ( IOErrorEvent.IO_ERROR, handleError );				_socket.removeEventListener ( SecurityErrorEvent.SECURITY_ERROR, handleError );				_socket.removeEventListener ( ProgressEvent.SOCKET_DATA, readIncomingBuffer );				_socket.close();				_socket = null;			}			_loggedOn = false;		}		public function getDenominations ( ) : void		{			send ( NoteAcceptorEvent.GET_DENOMINATIONS );			}		public function getState ( ) : void		{			send ( NoteAcceptorEvent.GET_STATE );			}		public function start ( ) : void		{			send ( "Start");		}		public function stop ( ) : void		{			send ( "Stop");		}		protected function send ( command : String ) : void		{			if ( _socket && _socket.connected )			{				_socket.writeUTFBytes ( command );				_socket.flush();			}		}	}}