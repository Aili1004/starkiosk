package com.snepo.givv.cardbrowser.util{		/**	* @author Andrew Wright	*/	import com.greensock.easing.*;	import com.greensock.*;		import flash.display.*;	import flash.geom.*;	import flash.text.*;		public class DisplayUtil	{		public static function remove ( t : DisplayObject ) : void		{			try			{				if ( t.parent ) t.parent.removeChild ( t );			}catch ( e : Error )			{			}			try			{				( t.parent as Object ).removeRogueChild ( t );			}catch ( e : Error )			{							}		}				public static function top ( t : DisplayObject ) : void		{			try			{				t.parent.setChildIndex ( t, t.parent.numChildren - 1 );			}catch ( e : Error )			{							}					}		public static function crossfadeText ( tf : TextField, newText : String ) : void		{			TweenMax.to ( tf, 0.5, { alpha : 0, onComplete : bringUpText, onCompleteParams : [ tf, newText ] } );		}		public static function bringUpText ( tf : TextField, newText : String ) : void		{			tf.text = newText;			TweenMax.to ( tf, 0.5, { alpha : 1 } );		}				public static function disposeLoader ( _loader : Loader ) : void		{			try {_loader.unloadAndStop(); }catch ( e : Error ){};			try {_loader.unload(); }catch ( e : Error ){}			try {_loader.close(); }catch ( e : Error ){}						try { ( _loader.content as Bitmap).bitmapData.dispose() }catch ( e : Error ){}		}		public static function disposeBitmap ( image : Bitmap ) : void		{			try			{				image.bitmapData.dispose();				image.bitmapData = null;				image = null;			}catch ( e : Error )			{							}		}				/**		* show() and hide() are generally used for onComplete callbacks in tweens 		*/				public static function hide ( t : DisplayObject ) : void		{			try			{				t.visible = false;			}catch ( e : Error )			{							}		}				public static function show ( t : DisplayObject ) : void		{			try			{				t.visible = true;			}catch ( e : Error )			{							}					}				public static function smooth ( target : * ) : void		{			if ( target is Loader )			{				try				{					( target.content as Bitmap ).smoothing = true;				}catch ( e : Error )				{									}			}else if ( target is Bitmap )			{				try				{					( target as Bitmap ).smoothing = true;				}catch ( e : Error )				{									}			}		}				public static function startPulse ( o : Object ) : TweenMax 		{			return TweenMax.to( o, 0.4, {  x : o.x-5,				                           width : o.width+10,							               y : o.y-5,							               height : o.height+10,							               repeat : -1,							               repeatDelay : 0,							               yoyo : true} );		}				public static function stopPulse ( t : TweenMax )		{			if (t)				t.complete();				//t.updateTo( {repeat : 1} );		}	}	}